import numpy as np
from scipy.sparse import save_npz, load_npz
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics, svm
from sklearn.neighbors import KNeighborsClassifier

from Utils.Extract_feature import extract_ngrams, extract_bytes_sequence
from Utils.ListFile import ListFile
from pathlib import Path
import pandas as pd


data_dir = Path("data")
smp_dir = data_dir.joinpath("samples")
ftr_dir = Path("pre-extract")
if not ftr_dir.exists():
    ftr_dir.mkdir()

if __name__ == '__main__':
    lbls = pd.read_csv(data_dir.joinpath("trainLabels.csv"))
    lbls["Id"] = lbls["Id"].astype(str)
    lbls["Class"] = lbls["Class"].astype("category")
    lbls.set_index("Id", inplace=True)

    # bytes_ngram_vct, bytes_ngrams = extract_ngrams(lbls.index, extract_bytes_sequence, 2)
    # print(bytes_ngrams.shape)
    #
    # col_sum = bytes_ngrams.sum(axis=0).A1
    # top_frqn_ftr_idx = np.argsort(col_sum)[::-1][:5000]
    # print(col_sum[top_frqn_ftr_idx])
    #
    # save_npz(ftr_dir.joinpath("bytes_2grams.npz"), bytes_ngrams[:, top_frqn_ftr_idx])
    # ListFile("bytes_2gram_names.txt").save(top_frqn_ftr_idx)

    X = pd.DataFrame(load_npz(ftr_dir.joinpath("bytes_2grams.npz")).toarray()).set_index(lbls.index)
    print(X.head())

    X_train, X_test, y_train, y_test = train_test_split(X, lbls, test_size=0.15, stratify=lbls)

    y_train = y_train.values.ravel()

    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    clf_y_pred = clf.predict(X_test)
    print("RF Accuracy:", metrics.accuracy_score(y_test, clf_y_pred))
    print()
    print("RF Confusion Metrix:\n", metrics.confusion_matrix(y_test, clf_y_pred))

    print("---------------------------")

    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(X_train, y_train)
    knn_y_pred = knn.predict(X_test)
    print("K-NN Accuracy:", metrics.accuracy_score(y_test, knn_y_pred))
    print()
    print("K-NN Confusion Metrix:\n", metrics.confusion_matrix(y_test, knn_y_pred))

    print("---------------------------")

    svm = svm.SVC()
    svm.fit(X_train, y_train)
    svm_y_pred = svm.predict(X_test)
    print("SVM Accuracy:", metrics.accuracy_score(y_test, svm_y_pred))
    print()
    print("SVM Confusion Metrix:\n", metrics.confusion_matrix(y_test, svm_y_pred))





