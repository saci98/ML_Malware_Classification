from typing import Tuple, Callable, Sequence

from sklearn.feature_extraction.text import CountVectorizer
from scipy.sparse import csr_matrix
from Utils.ReadFile import ReadFile

SeqReader = Callable[[str], str]

opcodes = ['add', 'align', 'and', 'bt', 'call', 'cdq', 'cld', 'cli', 'cmc', 'cmp', 'cwd', 'daa', 'db', 'dd', 'dec',
           'dw', 'faddp', 'fchs', 'fdiv', 'fdivp', 'fdivr', 'fild', 'fistp', 'fld', 'fstcw', 'fstcwimul', 'fstp',
           'fword', 'fxch', 'imul', 'inc', 'ins', 'ja', 'jb', 'jbe', 'je', 'jg', 'jge', 'jl', 'jle', 'jmp', 'jnb',
           'jno', 'jnz', 'jo', 'jz', 'lea', 'loope', 'mov', 'movsw', 'movzx', 'mul', 'neg', 'not', 'or', 'out', 'outs',
           'pop', 'popf', 'push', 'pusha', 'pushf', 'rcl', 'rcr', 'rdtsc', 'rep', 'ret', 'retn', 'rol', 'ror', 'sal',
           'sar', 'sbb', 'scas', 'setb', 'setle', 'setnle', 'setnz', 'setz', 'shl', 'shld', 'shr', 'sidt', 'stc', 'std',
           'sti', 'stos', 'stosw', 'sub', 'test', 'wait', 'xchg', 'xor']


def extract_ngrams(ids: Sequence[str], seq_reader: SeqReader, n: int) -> Tuple[CountVectorizer, csr_matrix]:
    class Reader:
        def __init__(self, id: str):
            self.id = id

        def read(self):
            return seq_reader(self.id)

    seqs = [Reader(id) for id in ids]
    ngram_vct = CountVectorizer(ngram_range=(n, n), stop_words=None, lowercase=False, input="file")
    ngrams = ngram_vct.fit_transform(seqs)
    return ngram_vct, ngrams


def extract_bytes_sequence(id: str) -> str:
    sequence_bytes = []
    for byte in ReadFile.bytes_reader(id):
        sequence_bytes.append(byte.lower())
    return " ".join(sequence_bytes)


def extract_opcode_sequence(id: str) -> str:
    sequence_opcodes = []
    for line in ReadFile.asm_lines(id):
        row = line.split()
        for opcode in opcodes:
            if opcode in row:
                sequence_opcodes.append(opcode)
                break
    return " ".join(sequence_opcodes)
